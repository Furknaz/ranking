// Carrega as vari√°veis de ambiente do arquivo .env
require('dotenv').config();

// Depend√™ncias
const express = require('express');
const cors = require('cors');
const sqlite3 = require('sqlite3');
const { open } = require('sqlite');
const http = require('http');
const { Server } = require("socket.io");
const webpush = require('web-push');

// IN√çCIO DA ADI√á√ÉO JOTAMAKER AI: M√≥dulo para gerar arquivos Excel (XLSX)
const ExcelJS = require('exceljs');
// FIM DA ADI√á√ÉO JOTAMAKER AI

// ### IN√çCIO DA ADI√á√ÉO: M√ìDULOS DE AUTENTICA√á√ÉO ###
const session = require('express-session');
const bcrypt = require('bcryptjs');
// ### FIM DA ADI√á√ÉO ###

// Configura√ß√£o do App
const app = express();
const server = http.createServer(app);
const io = new Server(server, {
    cors: {
        origin: "*",
        methods: ["GET", "POST"]
    }
});
const PORT = process.env.PORT || 3000;

// --- IN√çCIO DA CORRE√á√ÉO ---
// Middlewares Globais
// Substitu√≠mos o app.use(cors()) por uma configura√ß√£o mais expl√≠cita
// para garantir que as conex√µes de diferentes origens (como o servidor Python) funcionem.
const corsOptions = {
  origin: '*', // Permite requisi√ß√µes de qualquer origem. Seguro para desenvolvimento.
  methods: ["GET", "POST", "PUT", "DELETE"],
};
app.use(cors(corsOptions));
// --- FIM DA CORRE√á√ÉO ---

app.use(express.json({ limit: '10mb' }));
// ### IN√çCIO DA REMO√á√ÉO: MIDDLEWARE express.text() (DevRank AI) ###
// app.use(express.text({ limit: '10mb' })); // Removido, pois n√£o h√° mais rota de importa√ß√£o de texto puro
// ### FIM DA REMO√á√ÉO: MIDDLEWARE express.text() (DevRank AI) ###

// ### IN√çCIO DA ADI√á√ÉO: CONFIGURA√á√ÉO DA SESS√ÉO ###
// Configura o middleware de sess√£o. A 'secret' deve ser uma string longa e aleat√≥ria
// e, idealmente, vir de suas vari√°veis de ambiente (process.env.SESSION_SECRET).
app.use(session({
    secret: 'uma-chave-secreta-muito-forte-e-dificil-de-adivinhar', // IMPORTANTE: Mude isso e coloque no .env
    resave: false,
    saveUninitialized: false,
    cookie: {
        secure: false, // Em produ√ß√£o, com HTTPS, mude para 'true'
        httpOnly: true,
        maxAge: 1000 * 60 * 60 * 24 // Expira em 24 horas
    }
}));
// ### FIM DA ADI√á√ÉO ###

// Vari√°vel para a conex√£o com o banco de dados
let db;

// Fun√ß√£o para notificar clientes sobre atualiza√ß√µes
const broadcastUpdate = () => {
    io.emit('update');
    console.log('üì¢ Notifica√ß√£o de atualiza√ß√£o enviada para todos os clientes.');
};

// --- FUN√á√ÉO AUXILIAR ---
// Recalcula e atualiza o total de vendas de um vendedor
const updateSellerTotalSales = async (sellerId) => {
    if (!db) return; // Garante que o db existe
    const result = await db.get('SELECT SUM(value) AS total FROM sales WHERE sellerId = ?', [sellerId]);
    const totalSales = result.total || 0;
    await db.run('UPDATE sellers SET totalSales = ? WHERE id = ?', [totalSales, sellerId]);
};

// ### IN√çCIO DA ADI√á√ÉO: MIDDLEWARE DE AUTENTICA√á√ÉO ###
// Este middleware ir√° verificar se o usu√°rio est√° logado antes de permitir o acesso
// a qualquer rota que o utilize.
const isAuthenticated = (req, res, next) => {
    if (req.session.userId) {
        next(); // Se o usu√°rio est√° na sess√£o, continue
    } else {
        // Se n√£o estiver logado, retorna um erro 401 (N√£o Autorizado)
        res.status(401).json({ message: 'Acesso n√£o autorizado. Por favor, fa√ßa o login.' });
    }
};
// ### FIM DA ADI√á√ÉO ###


// --- INICIALIZA√á√ÉO DO SERVIDOR ---
const startServer = async () => {
    // Conecta ao banco de dados
    db = await open({
        filename: process.env.DB_FILE || './database.sqlite', // Adicionado um fallback
        driver: sqlite3.Database
    });

    // Habilita o suporte a chaves estrangeiras para garantir o ON DELETE CASCADE.
    await db.run('PRAGMA foreign_keys = ON');

    // Garante que as tabelas existam
    await db.exec(`CREATE TABLE IF NOT EXISTS sellers (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT NOT NULL, image TEXT, totalSales REAL DEFAULT 0)`);
    await db.exec(`CREATE TABLE IF NOT EXISTS sales (id INTEGER PRIMARY KEY AUTOINCREMENT, sellerId INTEGER NOT NULL, value REAL NOT NULL, date TEXT NOT NULL, FOREIGN KEY (sellerId) REFERENCES sellers(id) ON DELETE CASCADE)`);
    
    // ### IN√çCIO DA ADI√á√ÉO E ATUALIZA√á√ÉO: CRIA√á√ÉO DA TABELA DE USU√ÅRIOS E METAS ###
    // Tabela 'users' atualizada para incluir fullName, email, phone, profilePic
    await db.exec(`
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT NOT NULL UNIQUE,
            password_hash TEXT NOT NULL,
            fullName TEXT,
            email TEXT,
            phone TEXT,
            profilePic TEXT -- Armazenar√° a imagem em Base64
        )
    `);

    // CORRE√á√ÉO: Adiciona colunas apenas se n√£o existirem, sem usar IF NOT EXISTS no ALTER TABLE
    const addColumnIfNotExists = async (tableName, columnName, columnType) => {
        const tableInfo = await db.all(`PRAGMA table_info(${tableName})`);
        const columnExists = tableInfo.some(col => col.name === columnName);
        if (!columnExists) {
            await db.run(`ALTER TABLE ${tableName} ADD COLUMN ${columnName} ${columnType}`);
            console.log(`Adicionada coluna '${columnName}' √† tabela '${tableName}'.`);
        }
    };

    await addColumnIfNotExists('users', 'fullName', 'TEXT');
    await addColumnIfNotExists('users', 'email', 'TEXT');
    await addColumnIfNotExists('users', 'phone', 'TEXT');
    await addColumnIfNotExists('users', 'profilePic', 'TEXT');
    // IN√çCIO DA ADI√á√ÉO JOTAMAKER AI: Adiciona a coluna creationDate se n√£o existir
    await addColumnIfNotExists('users', 'creationDate', 'TEXT');
    // FIM DA ADI√á√ÉO JOTAMAKER AI

    // Adiciona um usu√°rio admin padr√£o se a tabela estiver vazia, para o primeiro login.
    // A senha √© 'admin123'. √â crucial troc√°-la depois!
    const adminUser = await db.get('SELECT * FROM users WHERE username = ?', ['admin']);
    if (!adminUser) {
        const salt = await bcrypt.genSalt(10);
        const passwordHash = await bcrypt.hash('admin123', salt);
        // Inserindo com os novos campos
        // IN√çCIO DA ADI√á√ÉO JOTAMAKER AI: Adiciona creationDate na inser√ß√£o do admin
        await db.run('INSERT INTO users (username, password_hash, fullName, email, creationDate) VALUES (?, ?, ?, ?, ?)', ['admin', passwordHash, 'Administrador Padr√£o', 'admin@example.com', new Date().toISOString()]);
        // FIM DA ADI√á√ÉO JOTAMAKER AI
        console.log('üîë Usu√°rio "admin" padr√£o criado com a senha "admin123" e dados de perfil.');
    }

    await db.exec(`
        CREATE TABLE IF NOT EXISTS goals (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            sellerId INTEGER NOT NULL,
            description TEXT,
            target_value REAL NOT NULL,
            start_date TEXT NOT NULL,
            end_date TEXT NOT NULL,
            status TEXT DEFAULT 'pending', 
            FOREIGN KEY (sellerId) REFERENCES sellers(id) ON DELETE CASCADE
        )
    `);
    // ### FIM DA ADI√á√ÉO E ATUALIZA√á√ÉO ###
    
    console.log('üîó Banco de dados conectado e tabelas criadas/atualizadas.');
    
    // --- ROTAS DA API ---
    const sellersRoutes = require('./routes/sellers');
    const salesRoutes = require('./routes/sales');
    const authRoutes = require('./routes/auth'); // J√° existe

    // Rotas de Autentica√ß√£o (n√£o protegidas, pois s√£o a porta de entrada)
    app.use('/api/auth', authRoutes(db, bcrypt));

    // Rotas protegidas por autentica√ß√£o
    app.use('/api/vendedores', isAuthenticated, sellersRoutes(db, broadcastUpdate));
    app.use('/api/vendas', isAuthenticated, salesRoutes(db, updateSellerTotalSales, broadcastUpdate));

    // IN√çCIO DA ADI√á√ÉO JOTAMAKER AI: Rota para obter m√©tricas do Dashboard (protegida) com mais dados
    app.get('/api/dashboard-metrics', isAuthenticated, async (req, res, next) => {
        try {
            const totalSellersResult = await db.get('SELECT COUNT(id) as count FROM sellers');
            const totalSalesResult = await db.get('SELECT COALESCE(SUM(totalSales), 0) as total FROM sellers'); 
            
            // IN√çCIO DA CORRE√á√ÉO JOTAMAKER AI: L√≥gica para 'Vendas Cadastradas'
            // Alterado para contar o n√∫mero total de vendas na tabela 'sales'
            const totalRegisteredSalesResult = await db.get('SELECT COUNT(id) as count FROM sales');
            // FIM DA CORRE√á√ÉO JOTAMAKER AI
            
            // L√≥gica para 'Atividades Recentes' (simulado: √∫ltimas 5 vendas)
            const recentActivities = await db.all(`
                SELECT 
                    s.name AS sellerName, 
                    sa.value AS saleValue, 
                    sa.date AS saleDate
                FROM sales sa
                JOIN sellers s ON sa.sellerId = s.id
                ORDER BY sa.date DESC
                LIMIT 5
            `);

            // Mapeia para o formato esperado pelo frontend em profile.js
            const formattedActivities = recentActivities.map(activity => ({
                name: `Venda de ${activity.sellerName}`,
                description: `Valor: ${activity.saleValue.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}`,
                status: 'Completed', // Simulado como 'Completed' para vendas
                dateTime: new Date(activity.saleDate).toLocaleString('pt-BR')
            }));

            res.json({
                totalSellers: totalSellersResult.count,
                totalSales: totalSalesResult.total,
                // IN√çCIO DA CORRE√á√ÉO JOTAMAKER AI: Passando a nova contagem de vendas registradas
                totalRegisteredSales: totalRegisteredSalesResult.count,
                // FIM DA CORRE√á√ÉO JOTAMAKER AI
                recentActivities: formattedActivities
            });
        } catch (err) {
            next(err);
        }
    });
    // FIM DA ADI√á√ÉO JOTAMAKER AI: Rota para obter m√©tricas do Dashboard (protegida)

    // Rota de ranking principal, agora com suporte a filtros de per√≠odo
    // Esta rota permanece p√∫blica para ser acess√≠vel pelo modo TV sem login.
    app.get('/api/ranking', async (req, res, next) => {
        try {
            const { period } = req.query; // 'today', 'week', 'month', 'all'
            let dateFilter = '';
            const params = [];

            const now = new Date();
            // Ajuste para garantir que now.getDay() retorne o dia correto da semana (0=domingo, 6=s√°bado)
            // e para que a data inicial da semana seja correta.
            if (period === 'today') {
                const today = new Date(now.getFullYear(), now.getMonth(), now.getDate()).toISOString();
                dateFilter = 'AND sa.date >= ?';
                params.push(today);
            } else if (period === 'week') {
                const dayOfWeek = now.getDay(); // 0 for Sunday, 1 for Monday, ..., 6 for Saturday
                const diff = now.getDate() - dayOfWeek; // Adjust to Sunday (start of week)
                const firstDayOfWeek = new Date(now.getFullYear(), now.getMonth(), diff).toISOString();
                dateFilter = 'AND sa.date >= ?';
                params.push(firstDayOfWeek);
            } else if (period === 'month') {
                const firstDayOfMonth = new Date(now.getFullYear(), now.getMonth(), 1).toISOString();
                dateFilter = 'AND sa.date >= ?';
                params.push(firstDayOfMonth);
            }

            const query = `
                SELECT
                    s.id,
                    s.name,
                    s.image,
                    COALESCE(SUM(sa.value), 0) as totalSales
                FROM
                    sellers s
                LEFT JOIN
                    sales sa ON s.id = sa.sellerId ${dateFilter}
                GROUP BY
                    s.id
                ORDER BY
                    totalSales DESC
            `;

            const sortedSellers = await db.all(query, params);
            res.json(sortedSellers);
        } catch (err) {
            next(err);
        }
    });

    // IN√çCIO DA ADI√á√ÉO JOTAMAKER AI: Rota para Exporta√ß√£o de Ranking em XLSX (Excel)
    app.get('/api/ranking/export-xlsx', isAuthenticated, async (req, res, next) => {
        try {
            const { period } = req.query;
            let dateFilter = '';
            const params = [];

            const now = new Date();
            if (period === 'today') {
                const today = new Date(now.getFullYear(), now.getMonth(), now.getDate()).toISOString();
                dateFilter = 'AND sa.date >= ?';
                params.push(today);
            } else if (period === 'week') {
                const dayOfWeek = now.getDay(); 
                const diff = now.getDate() - dayOfWeek; 
                const firstDayOfWeek = new Date(now.getFullYear(), now.getMonth(), diff).toISOString();
                dateFilter = 'AND sa.date >= ?';
                params.push(firstDayOfWeek);
            } else if (period === 'month') {
                const firstDayOfMonth = new Date(now.getFullYear(), now.getMonth(), 1).toISOString();
                dateFilter = 'AND sa.date >= ?';
                params.push(firstDayOfMonth);
            }

            const query = `
                SELECT
                    s.name,
                    COALESCE(SUM(sa.value), 0) as totalSales
                FROM
                    sellers s
                LEFT JOIN
                    sales sa ON s.id = sa.sellerId ${dateFilter}
                GROUP BY
                    s.id
                ORDER BY
                    totalSales DESC
            `;

            const sortedSellers = await db.all(query, params);

            // Gera√ß√£o do XLSX
            const workbook = new ExcelJS.Workbook();
            const worksheet = workbook.addWorksheet('Ranking de Vendas');

            // Definir cabe√ßalhos
            worksheet.columns = [
                { header: 'Posi√ß√£o', key: 'rank', width: 10 },
                { header: 'Vendedor', key: 'name', width: 30 },
                { header: 'Total Vendas', key: 'totalSales', width: 20, style: { numFmt: '"R$"#,##0.00' } } // Formato monet√°rio
            ];

            // Adicionar dados
            sortedSellers.forEach((seller, index) => {
                const rank = index + 1;
                worksheet.addRow({
                    rank: rank,
                    name: seller.name,
                    totalSales: seller.totalSales
                });
            });

            // Configurar a resposta para download do arquivo XLSX
            res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
            res.setHeader('Content-Disposition', `attachment; filename="ranking_vendas_${period}.xlsx"`);

            await workbook.xlsx.write(res);
            res.end(); // Finaliza a resposta

        } catch (err) {
            console.error('Erro ao exportar ranking para XLSX:', err);
            next(err);
        }
    });
    // FIM DA ADI√á√ÉO JOTAMAKER AI: Rota para Exporta√ß√£o de Ranking em XLSX (Excel)

    // --- MIDDLEWARE DE TRATAMENTO DE ERROS ---
    app.use((err, req, res, next) => {
        console.error('Um erro ocorreu:', err.stack);
        res.status(500).json({
            message: 'Ocorreu um erro inesperado no servidor.',
            error: err.message
        });
    });

    // L√≥gica de conex√£o do Socket.IO
    io.on('connection', (socket) => {
        console.log('‚úÖ Um cliente se conectou:', socket.id);
        socket.on('disconnect', () => {
            console.log('‚ùå Um cliente se desconectou:', socket.id);
        });
    });

    // Inicia o servidor HTTP com Socket.IO
    server.listen(PORT, () => {
        console.log(`üöÄ Servidor backend rodando em http://localhost:${PORT}`);
    });
};

startServer();