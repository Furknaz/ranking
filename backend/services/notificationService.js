// backend/services/notificationService.js

// --- IN√çCIO DA ADI√á√ÉO (DevRank AI): Importar a biblioteca Twilio ---
const twilio = require('twilio');
// --- FIM DA ADI√á√ÉO (DevRank AI) ---

const axios = require('axios'); // Mant√©m axios caso precise de outras APIs no futuro ou para refer√™ncia

/**
 * @file Servi√ßo de Notifica√ß√£o
 * @description M√≥dulo respons√°vel por enviar notifica√ß√µes para um endpoint externo, agora com suporte Twilio.
 */

class NotificationService {
    constructor() {
        // --- IN√çCIO DA ADI√á√ÉO (DevRank AI): Configura√ß√µes do Twilio ---
        this.accountSid = process.env.TWILIO_ACCOUNT_SID;
        this.authToken = process.env.TWILIO_AUTH_TOKEN;
        this.twilioPhoneNumber = process.env.TWILIO_PHONE_NUMBER; // Seu n√∫mero Twilio (ex: '+1234567890' ou 'whatsapp:+1234567890')
        this.recipientPhoneNumber = process.env.TWILIO_RECIPIENT_NUMBER; // N√∫mero para onde a notifica√ß√£o ser√° enviada

        if (this.accountSid && this.authToken) {
            this.twilioClient = twilio(this.accountSid, this.authToken);
            console.log('Twilio client inicializado.');
        } else {
            console.warn('‚ö†Ô∏è ATEN√á√ÉO: Credenciais Twilio (TWILIO_ACCOUNT_SID ou TWILIO_AUTH_TOKEN) n√£o configuradas. O envio de mensagens via Twilio estar√° desabilitado.');
        }
        if (!this.twilioPhoneNumber) {
            console.warn('‚ö†Ô∏è ATEN√á√ÉO: N√∫mero de telefone Twilio (TWILIO_PHONE_NUMBER) n√£o configurado. O envio de mensagens via Twilio estar√° desabilitado.');
        }
        if (!this.recipientPhoneNumber) {
            console.warn('‚ö†Ô∏è ATEN√á√ÉO: N√∫mero do destinat√°rio Twilio (TWILIO_RECIPIENT_NUMBER) n√£o configurado. O envio de mensagens via Twilio estar√° desabilitado.');
        }
        // --- FIM DA ADI√á√ÉO (DevRank AI) ---

        // A URL do servi√ßo de notifica√ß√£o externo para a implementa√ß√£o anterior (mantida para refer√™ncia)
        this.notificationApiUrl = process.env.NOTIFICATION_API_URL;
        if (this.notificationApiUrl) {
            console.log('Usando NOTIFICATION_API_URL para notifica√ß√µes gen√©ricas. Twilio ser√° priorit√°rio se configurado.');
        }
    }

    /**
     * Envia uma notifica√ß√£o de nova venda. Prioriza Twilio se configurado, caso contr√°rio, tenta a API gen√©rica.
     * @param {object} saleDetails - Detalhes da venda para enviar na notifica√ß√£o.
     * @param {string} saleDetails.sellerName - Nome do vendedor que realizou a venda.
     * @param {number} saleDetails.saleValue - Valor da venda.
     */
    async sendNewSaleNotification(saleDetails) {
        const { sellerName, saleValue } = saleDetails;
        const formattedValue = saleValue.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });
        const message = `üéâ Nova Venda Registrada! üéâ\nVendedor: ${sellerName}\nValor: ${formattedValue}`;

        // --- IN√çCIO DA ADI√á√ÉO (DevRank AI): L√≥gica de envio com Twilio ---
        if (this.twilioClient && this.twilioPhoneNumber && this.recipientPhoneNumber) {
            try {
                console.log(`Attempting to send Twilio message to ${this.recipientPhoneNumber} from ${this.twilioPhoneNumber}...`);
                const result = await this.twilioClient.messages.create({
                    body: message,
                    to: this.recipientPhoneNumber,
                    from: this.twilioPhoneNumber
                });
                console.log('‚úÖ Mensagem Twilio enviada com sucesso! SID:', result.sid);
                return; // Notifica√ß√£o enviada via Twilio, n√£o precisamos tentar a API gen√©rica
            } catch (error) {
                console.error('‚ùå Erro ao enviar mensagem via Twilio:', error.message);
                if (error.code) { // C√≥digos de erro espec√≠ficos do Twilio
                    console.error('C√≥digo de erro Twilio:', error.code);
                    console.error('Mais info:', error.moreInfo);
                }
                // Continua para a API gen√©rica se Twilio falhar ou n√£o estiver configurado
            }
        }
        // --- FIM DA ADI√á√ÉO (DevRank AI) ---

        // Fallback para a API de notifica√ß√£o gen√©rica, se Twilio n√£o estiver configurado ou falhar
        if (this.notificationApiUrl) {
            try {
                console.log(`Attempting to send generic notification to: ${this.notificationApiUrl}`);
                const response = await axios.post(this.notificationApiUrl, {
                    text: message
                });
                console.log('‚úÖ Notifica√ß√£o gen√©rica enviada com sucesso:', response.status);
            } catch (error) {
                console.error('‚ùå Erro ao enviar notifica√ß√£o gen√©rica:', error.message);
                if (error.response) {
                    console.error('Detalhes do erro da API de notifica√ß√£o:', error.response.data);
                }
            }
        } else {
            console.log('Nenhum servi√ßo de notifica√ß√£o configurado (Twilio ou API gen√©rica). Notifica√ß√£o n√£o enviada.');
        }
    }
}

module.exports = new NotificationService();